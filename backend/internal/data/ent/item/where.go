// Code generated by ent, DO NOT EDIT.

package item

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/hay-kot/homebox/backend/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldDescription, v))
}

// ImportRef applies equality check predicate on the "import_ref" field. It's identical to ImportRefEQ.
func ImportRef(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldImportRef, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldNotes, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldQuantity, v))
}

// Insured applies equality check predicate on the "insured" field. It's identical to InsuredEQ.
func Insured(v bool) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldInsured, v))
}

// Archived applies equality check predicate on the "archived" field. It's identical to ArchivedEQ.
func Archived(v bool) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldArchived, v))
}

// AssetID applies equality check predicate on the "asset_id" field. It's identical to AssetIDEQ.
func AssetID(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldAssetID, v))
}

// SerialNumber applies equality check predicate on the "serial_number" field. It's identical to SerialNumberEQ.
func SerialNumber(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldSerialNumber, v))
}

// ModelNumber applies equality check predicate on the "model_number" field. It's identical to ModelNumberEQ.
func ModelNumber(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldModelNumber, v))
}

// Manufacturer applies equality check predicate on the "manufacturer" field. It's identical to ManufacturerEQ.
func Manufacturer(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldManufacturer, v))
}

// LifetimeWarranty applies equality check predicate on the "lifetime_warranty" field. It's identical to LifetimeWarrantyEQ.
func LifetimeWarranty(v bool) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldLifetimeWarranty, v))
}

// WarrantyExpires applies equality check predicate on the "warranty_expires" field. It's identical to WarrantyExpiresEQ.
func WarrantyExpires(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldWarrantyExpires, v))
}

// WarrantyDetails applies equality check predicate on the "warranty_details" field. It's identical to WarrantyDetailsEQ.
func WarrantyDetails(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldWarrantyDetails, v))
}

// PurchaseTime applies equality check predicate on the "purchase_time" field. It's identical to PurchaseTimeEQ.
func PurchaseTime(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldPurchaseTime, v))
}

// PurchaseFrom applies equality check predicate on the "purchase_from" field. It's identical to PurchaseFromEQ.
func PurchaseFrom(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldPurchaseFrom, v))
}

// PurchasePrice applies equality check predicate on the "purchase_price" field. It's identical to PurchasePriceEQ.
func PurchasePrice(v float64) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldPurchasePrice, v))
}

// SoldTime applies equality check predicate on the "sold_time" field. It's identical to SoldTimeEQ.
func SoldTime(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldSoldTime, v))
}

// SoldTo applies equality check predicate on the "sold_to" field. It's identical to SoldToEQ.
func SoldTo(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldSoldTo, v))
}

// SoldPrice applies equality check predicate on the "sold_price" field. It's identical to SoldPriceEQ.
func SoldPrice(v float64) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldSoldPrice, v))
}

// SoldNotes applies equality check predicate on the "sold_notes" field. It's identical to SoldNotesEQ.
func SoldNotes(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldSoldNotes, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldDescription, v))
}

// ImportRefEQ applies the EQ predicate on the "import_ref" field.
func ImportRefEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldImportRef, v))
}

// ImportRefNEQ applies the NEQ predicate on the "import_ref" field.
func ImportRefNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldImportRef, v))
}

// ImportRefIn applies the In predicate on the "import_ref" field.
func ImportRefIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldImportRef, vs...))
}

// ImportRefNotIn applies the NotIn predicate on the "import_ref" field.
func ImportRefNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldImportRef, vs...))
}

// ImportRefGT applies the GT predicate on the "import_ref" field.
func ImportRefGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldImportRef, v))
}

// ImportRefGTE applies the GTE predicate on the "import_ref" field.
func ImportRefGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldImportRef, v))
}

// ImportRefLT applies the LT predicate on the "import_ref" field.
func ImportRefLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldImportRef, v))
}

// ImportRefLTE applies the LTE predicate on the "import_ref" field.
func ImportRefLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldImportRef, v))
}

// ImportRefContains applies the Contains predicate on the "import_ref" field.
func ImportRefContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldImportRef, v))
}

// ImportRefHasPrefix applies the HasPrefix predicate on the "import_ref" field.
func ImportRefHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldImportRef, v))
}

// ImportRefHasSuffix applies the HasSuffix predicate on the "import_ref" field.
func ImportRefHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldImportRef, v))
}

// ImportRefIsNil applies the IsNil predicate on the "import_ref" field.
func ImportRefIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldImportRef))
}

// ImportRefNotNil applies the NotNil predicate on the "import_ref" field.
func ImportRefNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldImportRef))
}

// ImportRefEqualFold applies the EqualFold predicate on the "import_ref" field.
func ImportRefEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldImportRef, v))
}

// ImportRefContainsFold applies the ContainsFold predicate on the "import_ref" field.
func ImportRefContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldImportRef, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldNotes, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldQuantity, v))
}

// InsuredEQ applies the EQ predicate on the "insured" field.
func InsuredEQ(v bool) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldInsured, v))
}

// InsuredNEQ applies the NEQ predicate on the "insured" field.
func InsuredNEQ(v bool) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldInsured, v))
}

// ArchivedEQ applies the EQ predicate on the "archived" field.
func ArchivedEQ(v bool) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldArchived, v))
}

// ArchivedNEQ applies the NEQ predicate on the "archived" field.
func ArchivedNEQ(v bool) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldArchived, v))
}

// AssetIDEQ applies the EQ predicate on the "asset_id" field.
func AssetIDEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldAssetID, v))
}

// AssetIDNEQ applies the NEQ predicate on the "asset_id" field.
func AssetIDNEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldAssetID, v))
}

// AssetIDIn applies the In predicate on the "asset_id" field.
func AssetIDIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldAssetID, vs...))
}

// AssetIDNotIn applies the NotIn predicate on the "asset_id" field.
func AssetIDNotIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldAssetID, vs...))
}

// AssetIDGT applies the GT predicate on the "asset_id" field.
func AssetIDGT(v int) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldAssetID, v))
}

// AssetIDGTE applies the GTE predicate on the "asset_id" field.
func AssetIDGTE(v int) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldAssetID, v))
}

// AssetIDLT applies the LT predicate on the "asset_id" field.
func AssetIDLT(v int) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldAssetID, v))
}

// AssetIDLTE applies the LTE predicate on the "asset_id" field.
func AssetIDLTE(v int) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldAssetID, v))
}

// SerialNumberEQ applies the EQ predicate on the "serial_number" field.
func SerialNumberEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldSerialNumber, v))
}

// SerialNumberNEQ applies the NEQ predicate on the "serial_number" field.
func SerialNumberNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldSerialNumber, v))
}

// SerialNumberIn applies the In predicate on the "serial_number" field.
func SerialNumberIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldSerialNumber, vs...))
}

// SerialNumberNotIn applies the NotIn predicate on the "serial_number" field.
func SerialNumberNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldSerialNumber, vs...))
}

// SerialNumberGT applies the GT predicate on the "serial_number" field.
func SerialNumberGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldSerialNumber, v))
}

// SerialNumberGTE applies the GTE predicate on the "serial_number" field.
func SerialNumberGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldSerialNumber, v))
}

// SerialNumberLT applies the LT predicate on the "serial_number" field.
func SerialNumberLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldSerialNumber, v))
}

// SerialNumberLTE applies the LTE predicate on the "serial_number" field.
func SerialNumberLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldSerialNumber, v))
}

// SerialNumberContains applies the Contains predicate on the "serial_number" field.
func SerialNumberContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldSerialNumber, v))
}

// SerialNumberHasPrefix applies the HasPrefix predicate on the "serial_number" field.
func SerialNumberHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldSerialNumber, v))
}

// SerialNumberHasSuffix applies the HasSuffix predicate on the "serial_number" field.
func SerialNumberHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldSerialNumber, v))
}

// SerialNumberIsNil applies the IsNil predicate on the "serial_number" field.
func SerialNumberIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldSerialNumber))
}

// SerialNumberNotNil applies the NotNil predicate on the "serial_number" field.
func SerialNumberNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldSerialNumber))
}

// SerialNumberEqualFold applies the EqualFold predicate on the "serial_number" field.
func SerialNumberEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldSerialNumber, v))
}

// SerialNumberContainsFold applies the ContainsFold predicate on the "serial_number" field.
func SerialNumberContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldSerialNumber, v))
}

// ModelNumberEQ applies the EQ predicate on the "model_number" field.
func ModelNumberEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldModelNumber, v))
}

// ModelNumberNEQ applies the NEQ predicate on the "model_number" field.
func ModelNumberNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldModelNumber, v))
}

// ModelNumberIn applies the In predicate on the "model_number" field.
func ModelNumberIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldModelNumber, vs...))
}

// ModelNumberNotIn applies the NotIn predicate on the "model_number" field.
func ModelNumberNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldModelNumber, vs...))
}

// ModelNumberGT applies the GT predicate on the "model_number" field.
func ModelNumberGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldModelNumber, v))
}

// ModelNumberGTE applies the GTE predicate on the "model_number" field.
func ModelNumberGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldModelNumber, v))
}

// ModelNumberLT applies the LT predicate on the "model_number" field.
func ModelNumberLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldModelNumber, v))
}

// ModelNumberLTE applies the LTE predicate on the "model_number" field.
func ModelNumberLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldModelNumber, v))
}

// ModelNumberContains applies the Contains predicate on the "model_number" field.
func ModelNumberContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldModelNumber, v))
}

// ModelNumberHasPrefix applies the HasPrefix predicate on the "model_number" field.
func ModelNumberHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldModelNumber, v))
}

// ModelNumberHasSuffix applies the HasSuffix predicate on the "model_number" field.
func ModelNumberHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldModelNumber, v))
}

// ModelNumberIsNil applies the IsNil predicate on the "model_number" field.
func ModelNumberIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldModelNumber))
}

// ModelNumberNotNil applies the NotNil predicate on the "model_number" field.
func ModelNumberNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldModelNumber))
}

// ModelNumberEqualFold applies the EqualFold predicate on the "model_number" field.
func ModelNumberEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldModelNumber, v))
}

// ModelNumberContainsFold applies the ContainsFold predicate on the "model_number" field.
func ModelNumberContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldModelNumber, v))
}

// ManufacturerEQ applies the EQ predicate on the "manufacturer" field.
func ManufacturerEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldManufacturer, v))
}

// ManufacturerNEQ applies the NEQ predicate on the "manufacturer" field.
func ManufacturerNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldManufacturer, v))
}

// ManufacturerIn applies the In predicate on the "manufacturer" field.
func ManufacturerIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldManufacturer, vs...))
}

// ManufacturerNotIn applies the NotIn predicate on the "manufacturer" field.
func ManufacturerNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldManufacturer, vs...))
}

// ManufacturerGT applies the GT predicate on the "manufacturer" field.
func ManufacturerGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldManufacturer, v))
}

// ManufacturerGTE applies the GTE predicate on the "manufacturer" field.
func ManufacturerGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldManufacturer, v))
}

// ManufacturerLT applies the LT predicate on the "manufacturer" field.
func ManufacturerLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldManufacturer, v))
}

// ManufacturerLTE applies the LTE predicate on the "manufacturer" field.
func ManufacturerLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldManufacturer, v))
}

// ManufacturerContains applies the Contains predicate on the "manufacturer" field.
func ManufacturerContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldManufacturer, v))
}

// ManufacturerHasPrefix applies the HasPrefix predicate on the "manufacturer" field.
func ManufacturerHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldManufacturer, v))
}

// ManufacturerHasSuffix applies the HasSuffix predicate on the "manufacturer" field.
func ManufacturerHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldManufacturer, v))
}

// ManufacturerIsNil applies the IsNil predicate on the "manufacturer" field.
func ManufacturerIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldManufacturer))
}

// ManufacturerNotNil applies the NotNil predicate on the "manufacturer" field.
func ManufacturerNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldManufacturer))
}

// ManufacturerEqualFold applies the EqualFold predicate on the "manufacturer" field.
func ManufacturerEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldManufacturer, v))
}

// ManufacturerContainsFold applies the ContainsFold predicate on the "manufacturer" field.
func ManufacturerContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldManufacturer, v))
}

// LifetimeWarrantyEQ applies the EQ predicate on the "lifetime_warranty" field.
func LifetimeWarrantyEQ(v bool) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldLifetimeWarranty, v))
}

// LifetimeWarrantyNEQ applies the NEQ predicate on the "lifetime_warranty" field.
func LifetimeWarrantyNEQ(v bool) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldLifetimeWarranty, v))
}

// WarrantyExpiresEQ applies the EQ predicate on the "warranty_expires" field.
func WarrantyExpiresEQ(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldWarrantyExpires, v))
}

// WarrantyExpiresNEQ applies the NEQ predicate on the "warranty_expires" field.
func WarrantyExpiresNEQ(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldWarrantyExpires, v))
}

// WarrantyExpiresIn applies the In predicate on the "warranty_expires" field.
func WarrantyExpiresIn(vs ...time.Time) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldWarrantyExpires, vs...))
}

// WarrantyExpiresNotIn applies the NotIn predicate on the "warranty_expires" field.
func WarrantyExpiresNotIn(vs ...time.Time) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldWarrantyExpires, vs...))
}

// WarrantyExpiresGT applies the GT predicate on the "warranty_expires" field.
func WarrantyExpiresGT(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldWarrantyExpires, v))
}

// WarrantyExpiresGTE applies the GTE predicate on the "warranty_expires" field.
func WarrantyExpiresGTE(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldWarrantyExpires, v))
}

// WarrantyExpiresLT applies the LT predicate on the "warranty_expires" field.
func WarrantyExpiresLT(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldWarrantyExpires, v))
}

// WarrantyExpiresLTE applies the LTE predicate on the "warranty_expires" field.
func WarrantyExpiresLTE(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldWarrantyExpires, v))
}

// WarrantyExpiresIsNil applies the IsNil predicate on the "warranty_expires" field.
func WarrantyExpiresIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldWarrantyExpires))
}

// WarrantyExpiresNotNil applies the NotNil predicate on the "warranty_expires" field.
func WarrantyExpiresNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldWarrantyExpires))
}

// WarrantyDetailsEQ applies the EQ predicate on the "warranty_details" field.
func WarrantyDetailsEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldWarrantyDetails, v))
}

// WarrantyDetailsNEQ applies the NEQ predicate on the "warranty_details" field.
func WarrantyDetailsNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldWarrantyDetails, v))
}

// WarrantyDetailsIn applies the In predicate on the "warranty_details" field.
func WarrantyDetailsIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldWarrantyDetails, vs...))
}

// WarrantyDetailsNotIn applies the NotIn predicate on the "warranty_details" field.
func WarrantyDetailsNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldWarrantyDetails, vs...))
}

// WarrantyDetailsGT applies the GT predicate on the "warranty_details" field.
func WarrantyDetailsGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldWarrantyDetails, v))
}

// WarrantyDetailsGTE applies the GTE predicate on the "warranty_details" field.
func WarrantyDetailsGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldWarrantyDetails, v))
}

// WarrantyDetailsLT applies the LT predicate on the "warranty_details" field.
func WarrantyDetailsLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldWarrantyDetails, v))
}

// WarrantyDetailsLTE applies the LTE predicate on the "warranty_details" field.
func WarrantyDetailsLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldWarrantyDetails, v))
}

// WarrantyDetailsContains applies the Contains predicate on the "warranty_details" field.
func WarrantyDetailsContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldWarrantyDetails, v))
}

// WarrantyDetailsHasPrefix applies the HasPrefix predicate on the "warranty_details" field.
func WarrantyDetailsHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldWarrantyDetails, v))
}

// WarrantyDetailsHasSuffix applies the HasSuffix predicate on the "warranty_details" field.
func WarrantyDetailsHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldWarrantyDetails, v))
}

// WarrantyDetailsIsNil applies the IsNil predicate on the "warranty_details" field.
func WarrantyDetailsIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldWarrantyDetails))
}

// WarrantyDetailsNotNil applies the NotNil predicate on the "warranty_details" field.
func WarrantyDetailsNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldWarrantyDetails))
}

// WarrantyDetailsEqualFold applies the EqualFold predicate on the "warranty_details" field.
func WarrantyDetailsEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldWarrantyDetails, v))
}

// WarrantyDetailsContainsFold applies the ContainsFold predicate on the "warranty_details" field.
func WarrantyDetailsContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldWarrantyDetails, v))
}

// PurchaseTimeEQ applies the EQ predicate on the "purchase_time" field.
func PurchaseTimeEQ(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldPurchaseTime, v))
}

// PurchaseTimeNEQ applies the NEQ predicate on the "purchase_time" field.
func PurchaseTimeNEQ(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldPurchaseTime, v))
}

// PurchaseTimeIn applies the In predicate on the "purchase_time" field.
func PurchaseTimeIn(vs ...time.Time) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldPurchaseTime, vs...))
}

// PurchaseTimeNotIn applies the NotIn predicate on the "purchase_time" field.
func PurchaseTimeNotIn(vs ...time.Time) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldPurchaseTime, vs...))
}

// PurchaseTimeGT applies the GT predicate on the "purchase_time" field.
func PurchaseTimeGT(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldPurchaseTime, v))
}

// PurchaseTimeGTE applies the GTE predicate on the "purchase_time" field.
func PurchaseTimeGTE(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldPurchaseTime, v))
}

// PurchaseTimeLT applies the LT predicate on the "purchase_time" field.
func PurchaseTimeLT(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldPurchaseTime, v))
}

// PurchaseTimeLTE applies the LTE predicate on the "purchase_time" field.
func PurchaseTimeLTE(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldPurchaseTime, v))
}

// PurchaseTimeIsNil applies the IsNil predicate on the "purchase_time" field.
func PurchaseTimeIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldPurchaseTime))
}

// PurchaseTimeNotNil applies the NotNil predicate on the "purchase_time" field.
func PurchaseTimeNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldPurchaseTime))
}

// PurchaseFromEQ applies the EQ predicate on the "purchase_from" field.
func PurchaseFromEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldPurchaseFrom, v))
}

// PurchaseFromNEQ applies the NEQ predicate on the "purchase_from" field.
func PurchaseFromNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldPurchaseFrom, v))
}

// PurchaseFromIn applies the In predicate on the "purchase_from" field.
func PurchaseFromIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldPurchaseFrom, vs...))
}

// PurchaseFromNotIn applies the NotIn predicate on the "purchase_from" field.
func PurchaseFromNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldPurchaseFrom, vs...))
}

// PurchaseFromGT applies the GT predicate on the "purchase_from" field.
func PurchaseFromGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldPurchaseFrom, v))
}

// PurchaseFromGTE applies the GTE predicate on the "purchase_from" field.
func PurchaseFromGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldPurchaseFrom, v))
}

// PurchaseFromLT applies the LT predicate on the "purchase_from" field.
func PurchaseFromLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldPurchaseFrom, v))
}

// PurchaseFromLTE applies the LTE predicate on the "purchase_from" field.
func PurchaseFromLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldPurchaseFrom, v))
}

// PurchaseFromContains applies the Contains predicate on the "purchase_from" field.
func PurchaseFromContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldPurchaseFrom, v))
}

// PurchaseFromHasPrefix applies the HasPrefix predicate on the "purchase_from" field.
func PurchaseFromHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldPurchaseFrom, v))
}

// PurchaseFromHasSuffix applies the HasSuffix predicate on the "purchase_from" field.
func PurchaseFromHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldPurchaseFrom, v))
}

// PurchaseFromIsNil applies the IsNil predicate on the "purchase_from" field.
func PurchaseFromIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldPurchaseFrom))
}

// PurchaseFromNotNil applies the NotNil predicate on the "purchase_from" field.
func PurchaseFromNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldPurchaseFrom))
}

// PurchaseFromEqualFold applies the EqualFold predicate on the "purchase_from" field.
func PurchaseFromEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldPurchaseFrom, v))
}

// PurchaseFromContainsFold applies the ContainsFold predicate on the "purchase_from" field.
func PurchaseFromContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldPurchaseFrom, v))
}

// PurchasePriceEQ applies the EQ predicate on the "purchase_price" field.
func PurchasePriceEQ(v float64) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldPurchasePrice, v))
}

// PurchasePriceNEQ applies the NEQ predicate on the "purchase_price" field.
func PurchasePriceNEQ(v float64) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldPurchasePrice, v))
}

// PurchasePriceIn applies the In predicate on the "purchase_price" field.
func PurchasePriceIn(vs ...float64) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldPurchasePrice, vs...))
}

// PurchasePriceNotIn applies the NotIn predicate on the "purchase_price" field.
func PurchasePriceNotIn(vs ...float64) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldPurchasePrice, vs...))
}

// PurchasePriceGT applies the GT predicate on the "purchase_price" field.
func PurchasePriceGT(v float64) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldPurchasePrice, v))
}

// PurchasePriceGTE applies the GTE predicate on the "purchase_price" field.
func PurchasePriceGTE(v float64) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldPurchasePrice, v))
}

// PurchasePriceLT applies the LT predicate on the "purchase_price" field.
func PurchasePriceLT(v float64) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldPurchasePrice, v))
}

// PurchasePriceLTE applies the LTE predicate on the "purchase_price" field.
func PurchasePriceLTE(v float64) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldPurchasePrice, v))
}

// SoldTimeEQ applies the EQ predicate on the "sold_time" field.
func SoldTimeEQ(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldSoldTime, v))
}

// SoldTimeNEQ applies the NEQ predicate on the "sold_time" field.
func SoldTimeNEQ(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldSoldTime, v))
}

// SoldTimeIn applies the In predicate on the "sold_time" field.
func SoldTimeIn(vs ...time.Time) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldSoldTime, vs...))
}

// SoldTimeNotIn applies the NotIn predicate on the "sold_time" field.
func SoldTimeNotIn(vs ...time.Time) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldSoldTime, vs...))
}

// SoldTimeGT applies the GT predicate on the "sold_time" field.
func SoldTimeGT(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldSoldTime, v))
}

// SoldTimeGTE applies the GTE predicate on the "sold_time" field.
func SoldTimeGTE(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldSoldTime, v))
}

// SoldTimeLT applies the LT predicate on the "sold_time" field.
func SoldTimeLT(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldSoldTime, v))
}

// SoldTimeLTE applies the LTE predicate on the "sold_time" field.
func SoldTimeLTE(v time.Time) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldSoldTime, v))
}

// SoldTimeIsNil applies the IsNil predicate on the "sold_time" field.
func SoldTimeIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldSoldTime))
}

// SoldTimeNotNil applies the NotNil predicate on the "sold_time" field.
func SoldTimeNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldSoldTime))
}

// SoldToEQ applies the EQ predicate on the "sold_to" field.
func SoldToEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldSoldTo, v))
}

// SoldToNEQ applies the NEQ predicate on the "sold_to" field.
func SoldToNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldSoldTo, v))
}

// SoldToIn applies the In predicate on the "sold_to" field.
func SoldToIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldSoldTo, vs...))
}

// SoldToNotIn applies the NotIn predicate on the "sold_to" field.
func SoldToNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldSoldTo, vs...))
}

// SoldToGT applies the GT predicate on the "sold_to" field.
func SoldToGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldSoldTo, v))
}

// SoldToGTE applies the GTE predicate on the "sold_to" field.
func SoldToGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldSoldTo, v))
}

// SoldToLT applies the LT predicate on the "sold_to" field.
func SoldToLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldSoldTo, v))
}

// SoldToLTE applies the LTE predicate on the "sold_to" field.
func SoldToLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldSoldTo, v))
}

// SoldToContains applies the Contains predicate on the "sold_to" field.
func SoldToContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldSoldTo, v))
}

// SoldToHasPrefix applies the HasPrefix predicate on the "sold_to" field.
func SoldToHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldSoldTo, v))
}

// SoldToHasSuffix applies the HasSuffix predicate on the "sold_to" field.
func SoldToHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldSoldTo, v))
}

// SoldToIsNil applies the IsNil predicate on the "sold_to" field.
func SoldToIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldSoldTo))
}

// SoldToNotNil applies the NotNil predicate on the "sold_to" field.
func SoldToNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldSoldTo))
}

// SoldToEqualFold applies the EqualFold predicate on the "sold_to" field.
func SoldToEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldSoldTo, v))
}

// SoldToContainsFold applies the ContainsFold predicate on the "sold_to" field.
func SoldToContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldSoldTo, v))
}

// SoldPriceEQ applies the EQ predicate on the "sold_price" field.
func SoldPriceEQ(v float64) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldSoldPrice, v))
}

// SoldPriceNEQ applies the NEQ predicate on the "sold_price" field.
func SoldPriceNEQ(v float64) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldSoldPrice, v))
}

// SoldPriceIn applies the In predicate on the "sold_price" field.
func SoldPriceIn(vs ...float64) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldSoldPrice, vs...))
}

// SoldPriceNotIn applies the NotIn predicate on the "sold_price" field.
func SoldPriceNotIn(vs ...float64) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldSoldPrice, vs...))
}

// SoldPriceGT applies the GT predicate on the "sold_price" field.
func SoldPriceGT(v float64) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldSoldPrice, v))
}

// SoldPriceGTE applies the GTE predicate on the "sold_price" field.
func SoldPriceGTE(v float64) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldSoldPrice, v))
}

// SoldPriceLT applies the LT predicate on the "sold_price" field.
func SoldPriceLT(v float64) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldSoldPrice, v))
}

// SoldPriceLTE applies the LTE predicate on the "sold_price" field.
func SoldPriceLTE(v float64) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldSoldPrice, v))
}

// SoldNotesEQ applies the EQ predicate on the "sold_notes" field.
func SoldNotesEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldSoldNotes, v))
}

// SoldNotesNEQ applies the NEQ predicate on the "sold_notes" field.
func SoldNotesNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldSoldNotes, v))
}

// SoldNotesIn applies the In predicate on the "sold_notes" field.
func SoldNotesIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldSoldNotes, vs...))
}

// SoldNotesNotIn applies the NotIn predicate on the "sold_notes" field.
func SoldNotesNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldSoldNotes, vs...))
}

// SoldNotesGT applies the GT predicate on the "sold_notes" field.
func SoldNotesGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldSoldNotes, v))
}

// SoldNotesGTE applies the GTE predicate on the "sold_notes" field.
func SoldNotesGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldSoldNotes, v))
}

// SoldNotesLT applies the LT predicate on the "sold_notes" field.
func SoldNotesLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldSoldNotes, v))
}

// SoldNotesLTE applies the LTE predicate on the "sold_notes" field.
func SoldNotesLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldSoldNotes, v))
}

// SoldNotesContains applies the Contains predicate on the "sold_notes" field.
func SoldNotesContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldSoldNotes, v))
}

// SoldNotesHasPrefix applies the HasPrefix predicate on the "sold_notes" field.
func SoldNotesHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldSoldNotes, v))
}

// SoldNotesHasSuffix applies the HasSuffix predicate on the "sold_notes" field.
func SoldNotesHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldSoldNotes, v))
}

// SoldNotesIsNil applies the IsNil predicate on the "sold_notes" field.
func SoldNotesIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldSoldNotes))
}

// SoldNotesNotNil applies the NotNil predicate on the "sold_notes" field.
func SoldNotesNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldSoldNotes))
}

// SoldNotesEqualFold applies the EqualFold predicate on the "sold_notes" field.
func SoldNotesEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldSoldNotes, v))
}

// SoldNotesContainsFold applies the ContainsFold predicate on the "sold_notes" field.
func SoldNotesContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldSoldNotes, v))
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.Group) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Item) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Item) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLabel applies the HasEdge predicate on the "label" edge.
func HasLabel() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, LabelTable, LabelPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLabelWith applies the HasEdge predicate on the "label" edge with a given conditions (other predicates).
func HasLabelWith(preds ...predicate.Label) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newLabelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLocation applies the HasEdge predicate on the "location" edge.
func HasLocation() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LocationTable, LocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationWith applies the HasEdge predicate on the "location" edge with a given conditions (other predicates).
func HasLocationWith(preds ...predicate.Location) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFields applies the HasEdge predicate on the "fields" edge.
func HasFields() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FieldsTable, FieldsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFieldsWith applies the HasEdge predicate on the "fields" edge with a given conditions (other predicates).
func HasFieldsWith(preds ...predicate.ItemField) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newFieldsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMaintenanceEntries applies the HasEdge predicate on the "maintenance_entries" edge.
func HasMaintenanceEntries() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MaintenanceEntriesTable, MaintenanceEntriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMaintenanceEntriesWith applies the HasEdge predicate on the "maintenance_entries" edge with a given conditions (other predicates).
func HasMaintenanceEntriesWith(preds ...predicate.MaintenanceEntry) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newMaintenanceEntriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttachments applies the HasEdge predicate on the "attachments" edge.
func HasAttachments() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttachmentsTable, AttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttachmentsWith applies the HasEdge predicate on the "attachments" edge with a given conditions (other predicates).
func HasAttachmentsWith(preds ...predicate.Attachment) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newAttachmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Item) predicate.Item {
	return predicate.Item(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Item) predicate.Item {
	return predicate.Item(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Item) predicate.Item {
	return predicate.Item(sql.NotPredicates(p))
}
